const { assert } = require('chai');

// function Promise_all(promises) {
//   return new Promise((resolve, reject) => {
//     // Your code here.
//     async function loop(xs) {
//       if (xs.length < 1) {
//         return xs;
//       }
//       let ys, v;
//       try {
//         v = await xs[0];
//         ys = await loop(xs.slice(1));
//         return [v, ...ys];
//       } catch (e) {
//         reject(e);
//         throw e;
//       }
//     }
//     return resolve(loop(promises));
//   });
// }

function Promise_all(promises) {
  return new Promise((resolve, reject) => {
    // Your code here.
    var i = 0;
    promises.forEach(p => {
      p.then(d => {
        i++;
        if (i >= promises.length) resolve(promises);
        return d;
      }).catch(e => reject(e));
    });
  });
}

describe('Promise_all', () => {
  it('[]', () => {
    return Promise_all([]).then(array => {
      // assert.deepEqual([], array);
    });
  });
});

// Test code.
Promise_all([]).then(array => {
  console.log('This should be []:', array);
});

function soon(val) {
  return new Promise(resolve => {
    setTimeout(() => resolve(val), Math.random() * 50);
  });
}

Promise_all([soon(1), soon(2), soon(3)]).then(array => {
  console.log('This should be [1, 2, 3]:', array);
});

Promise_all([soon(1), Promise.reject('X'), soon(3)])
  .then(array => {
    console.log('We should not get here');
  })
  .catch(error => {
    if (error == 'X') console.log('error is X, ok');
    if (error != 'X') {
      console.log('Unexpected failure:', error);
    }
  });
